package mimex;

import arc.Core;
import arc.files.Fi;
import arc.util.Log;
import mindustry.Vars;
import mindustry.mod.Mod;
import mindustry.world.Block;
import mindustry.world.blocks.distribution.ItemBridge;
import mindustry.world.blocks.distribution.MassDriver;
import mindustry.world.blocks.logic.LogicBlock;
import mindustry.world.blocks.payloads.PayloadMassDriver;
import mindustry.world.blocks.power.PowerNode;
import mindustry.world.blocks.units.UnitFactory;
import mindustry.world.meta.BuildVisibility;

import java.util.IdentityHashMap;
import java.util.Map;
import java.util.Scanner;

public class MindustryMetadataExtractor extends Mod {

    private final String newLine = System.lineSeparator();

    public MindustryMetadataExtractor(){
        Log.info("MindustryMetadataExtractor constructor.");
    }

    @Override
    public void init() {
        super.init();
        writeIcons();
        writeBlockTypes();
    }

    private void writeIcons() {
        StringBuilder sbr = new StringBuilder();

        sbr.append("// DO NOT EDIT! Generated by MiMeX - Mindustry Metadata Extractor").append(newLine);

        try(Scanner scan = new Scanner(Core.files.internal("icons/icons.properties").read(512))){
            while(scan.hasNextLine()) {
                String line = scan.nextLine();
                String[] s = line.split("[|=]");
                if (s.length < 3) continue;
                String name = s[2].toUpperCase().replaceAll("-UI$", "");
                sbr.append(name).append(';').append(s[0]).append(newLine);
            }
        }

        Fi fi = Core.files.local("mimex-icons.txt");
        fi.writeString(sbr.toString());
        Log.info("Created local file " + fi.absolutePath());
    }

    private void writeBlockTypes() {
        StringBuilder sbr = new StringBuilder();

        sbr.append("// DO NOT EDIT! Generated by MiMeX - Mindustry Metadata Extractor").append(newLine);

        sbr.append("name")
                .append(';').append("visibility")
                .append(';').append("size")
                .append(';').append("subclass")
                .append(';').append("configurable")
                .append(';').append("category")
                .append(';').append("range")
                .append(';').append("hasItems")
                .append(';').append("acceptsItems")
                .append(';').append("separateItemCapacity")
                .append(';').append("itemCapacity")
                .append(';').append("noSideBlend")
                .append(';').append("unloadable")
                .append(';').append("hasLiquids")
                .append(';').append("outputsLiquid")
                .append(';').append("liquidCapacity")
                .append(';').append("hasPower")
                .append(';').append("consumesPower")
                .append(';').append("outputsPower")
                .append(';').append("connectedPower")
                .append(';').append("conductivePower")
                .append(';').append("maxNodes")
                .append(';').append("outputFacing")
                .append(';').append("rotate")
                .append(';').append("unitPlans")
                .append(newLine);

        Vars.content.blocks().each(block -> sbr.append(block.name)
                .append(';').append(visibilityMap.get(block.buildVisibility))
                .append(';').append(block.size)
                .append(';').append(block.subclass.getSimpleName())
                .append(';').append(block.configurable)
                .append(';').append(block.category)
                .append(';').append(getRange(block))
                .append(';').append(block.hasItems)
                .append(';').append(block.acceptsItems)
                .append(';').append(block.separateItemCapacity)
                .append(';').append(block.itemCapacity)
                .append(';').append(block.noSideBlend)
                .append(';').append(block.unloadable)
                .append(';').append(block.hasLiquids)
                .append(';').append(block.outputsLiquid)
                .append(';').append(block.liquidCapacity)
                .append(';').append(block.hasPower)
                .append(';').append(block.consumesPower)
                .append(';').append(block.outputsPower)
                .append(';').append(block.connectedPower)
                .append(';').append(block.conductivePower)
                .append(';').append(block instanceof PowerNode p ? p.maxNodes : 0)
                .append(';').append(block.outputFacing)
                .append(';').append(block.rotate)
                .append(';').append(block instanceof UnitFactory f ? getUnitPlans(f) : "")
                .append(newLine));

        Fi fi = Core.files.local("mimex-blocks.txt");
        fi.writeString(sbr.toString());
        Log.info("Created local file " + fi.absolutePath());
    }
    
    private final Map<BuildVisibility, String> visibilityMap = new IdentityHashMap<>(); {
        visibilityMap.put(BuildVisibility.hidden, "hidden");
        visibilityMap.put(BuildVisibility.shown, "shown");
        visibilityMap.put(BuildVisibility.debugOnly, "debugOnly");
        visibilityMap.put(BuildVisibility.editorOnly, "editorOnly");
        visibilityMap.put(BuildVisibility.sandboxOnly, "sandboxOnly");
        visibilityMap.put(BuildVisibility.campaignOnly, "campaignOnly");
        visibilityMap.put(BuildVisibility.lightingOnly, "lightingOnly");
        visibilityMap.put(BuildVisibility.ammoOnly, "ammoOnly");
        visibilityMap.put(BuildVisibility.fogOnly, "fogOnly");
    }

    private String getUnitPlans(UnitFactory unitFactory) {
        StringBuilder sbr = new StringBuilder(100);
        unitFactory.plans.each(p -> sbr.append('|').append(p.unit.name));
        return sbr.substring(1);
    }

    private double getRange(Block block) {
        if (block instanceof PowerNode p) {
            return p.laserRange;
        } else if (block instanceof ItemBridge b) {
            return b.range;
        } else if (block instanceof MassDriver d) {
            return d.range / Vars.tilesize;
        } else if (block instanceof PayloadMassDriver d) {
            return d.range / Vars.tilesize;
        } else if (block instanceof LogicBlock l) {
            return l.range / Vars.tilesize;
        } else {
            return 0;
        }
    }
}
