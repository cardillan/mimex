package mimex;

import arc.Core;
import arc.files.Fi;
import arc.util.Log;
import mindustry.Vars;
import mindustry.content.Blocks;
import mindustry.mod.Mod;
import mindustry.world.Block;
import mindustry.world.blocks.power.PowerNode;
import mindustry.world.meta.BuildVisibility;

import java.util.Scanner;

public class MindustryMetadataExtractor extends Mod{

    public MindustryMetadataExtractor(){
        Log.info("MindustryMetadataExtractor constructor.");
    }

    @Override
    public void init() {
        super.init();
        writeIcons();
        writeBlockTypes();
    }

    private void writeBlockTypes() {
        StringBuilder sbr = new StringBuilder();

        sbr.append("// DO NOT EDIT! Generated by MiMeX - Mindustry Metadata Extractor\n");

        sbr.append("name")
                .append(';').append("size")
                .append(';').append("hasPower")
                .append(';').append("configurable")
                .append(';').append("subclass")
                .append(';').append("maxNodes")
                .append(';').append("laserRange")
                .append(';').append("category")
                .append('\n');

        for (Block block : Vars.content.blocks()) {
            BuildVisibility v = block.buildVisibility;
            if (v == BuildVisibility.shown || v == BuildVisibility.campaignOnly || v == BuildVisibility.editorOnly
                    || v == BuildVisibility.sandboxOnly || block == Blocks.air) {
                sbr.append(block.name)
                        .append(';').append(block.size)
                        .append(';').append(block.hasPower)
                        .append(';').append(block.configurable)
                        .append(';').append(block.subclass.getSimpleName())
                        .append(';').append(block instanceof PowerNode p ? p.maxNodes : 0)
                        .append(';').append(block instanceof PowerNode p ? p.laserRange : 0)
                        .append(';').append(block.category)
                        .append('\n');
            }
        }

        Fi fi = Core.files.local("mimex-blocks.txt");
        fi.writeString(sbr.toString());
        Log.info("Created local file " + fi.absolutePath());
    }

    private void writeIcons() {
        StringBuilder sbr = new StringBuilder();

        sbr.append("// DO NOT EDIT! Generated by MiMeX - Mindustry Metadata Extractor\n");

        try(Scanner scan = new Scanner(Core.files.internal("icons/icons.properties").read(512))){
            while(scan.hasNextLine()) {
                String line = scan.nextLine();
                String[] s = line.split("[|=]");
                if (s.length < 3) continue;
                String name = s[2].toUpperCase().replaceAll("-UI$", "");
                sbr.append(name).append(';').append(s[0]).append('\n');
            }
        }

        Fi fi = Core.files.local("mimex-icons.txt");
        fi.writeString(sbr.toString());
        Log.info("Created local file " + fi.absolutePath());
    }
}
